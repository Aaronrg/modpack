// Get a square in the center of the avaliable area
// \note macro to pass by reference pos and mySize
#define minigame_hud_fitsqare(pos, mySize) \
	if ( mySize##_x > mySize##_y ) \
	{ \
		pos##_x += (mySize##_x-mySize##_y)/2; \
		mySize##_x = mySize##_y; \
	} \
	else \
	{ \
		pos##_y += (mySize##_y-mySize##_x)/2; \
		mySize##_x = mySize##_x; \
	} \
	if(panel_bg_padding) \
	{ \
		pos += '1 1 0' * panel_bg_padding; \
		mySize -= '2 2 0' * panel_bg_padding; \
	}

// Get position and size of a panel
// \note macro to pass by reference pos and mySize
#define minigame_hud_panelarea(pos, mySize, panelID) \
	pos = stov(cvar_string(strcat("hud_panel_", HUD_PANEL(panelID).panel_name, "_pos"))); \
	mySize = stov(cvar_string(strcat("hud_panel_", HUD_PANEL(panelID).panel_name, "_size"))); \
	pos##_x *= vid_conwidth; pos##_y *= vid_conheight; \
	mySize##_x *= vid_conwidth; mySize##_y *= vid_conheight;

// draw a panel border and the given texture
void minigame_hud_simpleboard(vector pos, vector mySize, string board_texture);

// Normalize (2D vector) v to relative coordinate inside pos mySize
vector minigame_hud_normalize(vector v, vector pos, vector mySize);

// De-normalize (2D vector) v from relative coordinate inside pos mySize
vector minigame_hud_denormalize(vector v, vector pos, vector mySize);

// De-normalize (2D vector) v from relative size inside pos mySize
vector minigame_hud_denormalize_size(vector v, vector pos, vector mySize);

// Check if the mouse is inside the given area
float minigame_hud_mouse_in(vector pos, vector sz);

// Get full path of a minigame texture
string minigame_texture(string name);

// For minigame descriptors: hud function for the game board
.void(vector pos, vector size) minigame_hud_board;
// For minigame descriptors: hud function for the game status
.void(vector pos, vector size) minigame_hud_status;

// register all minigames
void initialize_minigames();

void deactivate_minigame();

entity active_minigame;

// Whethere there's an active minigame
float minigame_isactive()
{
	return active_minigame != world;
}

// Read a minigame entity from the server
void ent_read_minigame();

float HUD_MinigameMenu_IsOpened();
void HUD_MinigameMenu_Close();



#define FOREACH_MINIGAME_ENTITY(entityvar) \
	entityvar=world; \
	while( (entityvar = findentity(entityvar,owner,active_minigame)) ) 

