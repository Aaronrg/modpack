// Get a square in the center of the avaliable area
// \note macro to pass by reference pos and mySize
#define minigame_hud_fitsqare(pos, mySize) \
	if ( mySize_x > mySize_y ) \
	{ \
		pos_x += (mySize_x-mySize_y)/2; \
		mySize_x = mySize_y; \
	} \
	else \
	{ \
		pos_y += (mySize_y-mySize_x)/2; \
		mySize_x = mySize_x; \
	} \
	if(panel_bg_padding) \
	{ \
		pos += '1 1 0' * panel_bg_padding; \
		mySize -= '2 2 0' * panel_bg_padding; \
	}

// draw a panel border and the given texture
void minigame_hud_simpleboard(vector pos, vector mySize, string board_texture);

// Get full path of a minigame texture
string minigame_texture(string name);

// For minigame descriptors: hud function for the game board
.void(vector pos, vector size) minigame_hud_board;
// For minigame descriptors: hud function for the game status
.void(vector pos, vector size) minigame_hud_status;

// register all minigames
void initialize_minigames();

void deactivate_minigame();

entity active_minigame;

// Whethere there's an active minigame
float minigame_isactive()
{
	return active_minigame != world;
}

// Read a minigame entity from the server
void ent_read_minigame();

float HUD_MinigameCreate_IsOpened();
void HUD_MinigameCreate_Close();