entity minigame_descriptors;

entity minigame_get_descriptor(string id)
{
	entity e;
	for ( e = minigame_descriptors; e != world; e = e.chain )
		if ( e.netname == id )
			return e;
	return world;
}

/// For minigame sessions: minigame descriptor object
.entity descriptor;

/// For minigame sessions/descriptors: execute the given event
/// Client events:
/// 	mouse_moved(vector mouse_pos) (return 1 to handle input, 0 to discard)
/// 	key_pressed(float K_Keycode)  (return 1 to handle input, 0 to discard)
/// 	key_released(float K_Keycode) (return 1 to handle input, 0 to discard)
/// 		(note: see dpdefs/keycodes.qc for values)
/// Server events:
/// 	start()
/// 	end()
/// 	join(entity player) (return 1 to accept the new player, 0 to discard)
/// 	part(entity player)
.float(entity,string,...)   minigame_event;


const float MINIG_SF_CREATE = 1;
const float MINIG_SF_PLAYERS = 2;

#include "minigame_test.qc"

#define REGISTERED_MINIGAMES \
	MINIGAME(test)
